require 'spec_helper'

describe Group do

  it { should validate_presence_of(:group_name) }
  it { should validate_uniqueness_of(:group_name) }
  # it { should ensure_length_of(:group_name).is_at_most(30) }

  describe '#set_repo_name' do
    # The tests below are checking for a method that is called when
    # the group is initially created, so it is not explicitly called here.
    context 'when name is specified' do
      subject(:group) do
        stub_model(Group,
                   group_name: 'g2markus',
                   repo_name: 'g2markus')
      end

      it { expect(group.repo_name).to eq 'g2markus' }
    end

    context 'when name is not specified' do
      subject(:group) { create(:group) }

      it { expect(group.repo_name).to start_with('group_') }
    end
  end

  describe '#repository_name' do
    subject(:group) { create(:group, repo_name: 'g2markus') }

    it 'returns the groups repository name' do
      expect(group.repository_name).to eq 'g2markus'
    end
  end

  describe '#get_autogenerated_group_name' do
    subject(:group) { stub_model(Group) }

    it 'returns autogenerated group name' do
      expect(group.get_autogenerated_group_name).to start_with('group_')
    end
  end

  describe '#grouping_for_assignment' do
    before :each do
      @group = create(:group)
      @assignment = create(:assignment)
      @grouping = create(:grouping, group: @group, assignment: @assignment)
    end
    # let(:group) { create(:group) }
    # let(:assignment) { create(:assignment) }
    # let(:grouping) { create(:grouping, group: group, assignment: assignment) }

    it 'returns the grouping for the specified' do
      expect(@group.grouping_for_assignment(@assignment.id)).to eq @grouping
      # expect(group.grouping_for_assignment(assignment.id)).to eq grouping
    end
  end

  describe '#repository_external_access_url' do
    subject(:group) { create(:group) }

    it 'returns URL of externally accessible repository' do
      expect(group.repository_external_access_url).to end_with(group.repo_name)
    end
  end

  describe '#repository_admin?' do
    context 'when has administrator rights' do
      subject(:group) { stub_model(Group) }

      it { expect(group.repository_admin?).to be true }
    end

    context 'when does not have administrator rights'
  end

  describe '#repository_config'
  describe '#build_repository'
  describe '#repo'
  describe '#access_repo'
end

<%= stylesheet_link_tag("grader") %>
<%= stylesheet_link_tag("livepipe/tabs") %>
<%= stylesheet_link_tag("rubrics") %>
<%= stylesheet_link_tag("SyntaxHighlighter") %>
<%= javascript_include_tag "livepipe/livepipe.js" %>
<%= javascript_include_tag "livepipe/window.js" %>
<%= javascript_include_tag "livepipe/tabs.js" %>
<%= javascript_include_tag "controls.js" %>
<%= javascript_include_tag "grader.js" %>
<%= javascript_include_tag "selecttext.js" %>
<%= javascript_include_tag "syntaxhighlighter/shCore.js" %>
<%= javascript_include_tag "syntaxhighlighter/shBrushJava.js" %>
<%= javascript_include_tag "syntaxhighlighter/shBrushXml.js" %>
<script>
var selected_criterion_id = null;
var annotation_labels = $H();
var line_annotations = $A();
var positions = null;
var modal = null;
var init_content_width = 0;
var init_code_pane_width = 0;


//Load a submitted file into the code-viewer based on file id's
function load_submitted_file(fid) {
  $('working').show();
  if(line_annotations.size() > 0) {
    line_annotations.each(function(line, index) {
      var node = get_node_from_line(index + 1);
      $(node).stopObserving('mouseover', line['mouseover']);
      $(node).stopObserving('mouseout', line['mouseout']);
    });
  }
  annotation_labels = $H();
  line_annotations.clear();

<%= remote_function (:update => "codeviewer",
                   :url =>{ :action => "codeviewer", :id => @assignment.id, :uid => @uid },
                   :with => "'fid='+fid", :after => "$('working').hide();")%>
}

function make_new_annotation() {

  positions = getSelectedLines($('code'));
  if(positions.line_start == 0 && positions.line_end == 0) {
    alert('You must select some text to annotate');
    return false;
  }
  
  modal.open();
  $('new_annotation_content').setValue('');
  $('new_annotation_category').setValue('');
  $('new_annotation_content').focus();
  return false;

}

function render_annotation_label(id, content) {
  var annot_label = new Element('div', 
      {'class': 'annotation', 
       'id': 'annotation_'+id,
       'style': 'display:none;'
      }).update(content);
  $('annotation_holder').insert(annot_label);
}

function add_annotation(range, label_id) {
  //Does the label_id exist in the annotation_labels hash?
  if(annotation_labels[label_id] == null) {
    console.error('No annotation label exists in memory for label id #' + label_id);
    return;
  }
  annotation_labels[label_id]['annotated_lines'].push(range);

  range.each(function(line_num) {
      highlightLine(line_num);
      this_node = get_node_from_line(line_num);
      if(line_annotations[line_num] == null) {
        line_annotations[line_num] = $H();
        line_annotations[line_num]['annotations'] = $A();
        line_annotations[line_num]['observing'] = true;
        line_annotations[line_num]['mouseover'] = function(event) {
          display_annotation(line_num, Event.pointerX(event), Event.pointerY(event));
        };
        line_annotations[line_num]['mouseout'] = function() {
          hide_annotation();
        };
                        
        $(this_node).observe('mouseover', line_annotations[line_num]['mouseover']);
        $(this_node).observe('mouseout', line_annotations[line_num]['mouseout']);
      }
      line_annotations[line_num]['annotations'].push(label_id);
  });
}

function display_annotation(line_num, mouse_x, mouse_y) {
  var total_annotation = '';
  line_annotations[line_num]['annotations'].each(
    function(label_id) {
      if(annotation_labels[label_id] != null) {
         total_annotation += '<p>' + annotation_labels[label_id]['content'] + '</p>';
      }
    });
  $('dummy_annotation').update(total_annotation);
  $('dummy_annotation').setStyle({'position':'absolute', 'left': (mouse_x + 15) + 'px', 'top': (mouse_y + 15) + 'px'});
  $('dummy_annotation').show();
}
function hide_annotation() {
  $('dummy_annotation').hide();
}

function get_node_from_line(line_num) {
   var code = $$('.dp-j')[0];
   if(code == null) {
     console.error('Could not find .dp-j class');
     return;
   }
   return code.immediateDescendants()[line_num - 1];
}

function add_annotation_label(label_id, label) {
  if (annotation_labels[label_id] == null) {
    //We've never used this label before - add it to the collection
    annotation_labels[label_id] = $H();
    annotation_labels[label_id]['annotated_lines'] = $A();
    annotation_labels[label_id]['content'] = label;
  }
}




function submit_new_annotation(content, category_id) {

  if (content == '') {
    alert('You must provide some annotation text');
    return false;
  }
  $('working').show();
  modal.close();
  <%= remote_function (
                    :url => { :action => "create" },
                    :with => "'fid='+ $('select_file_id').value +'&line_start=' + positions.line_start + ' &line_end=' + positions.line_end + '&annotation_text='+ content + '&category_id=' + category_id", :after => "$('working').hide();")
                    %>


}

function setup_annotation_categories() {
  <% @annotation_categories.each do |annotation_category| %>
    $('annotation_category_<%=annotation_category.id%>').observe('click',
      function(event) {
        hide_annotation_label_lists();
        $('annotation_label_list_<%=annotation_category.id%>').show();
      }
    );
    
    //Set the x/y coordinates for each annotation_label_list
    var left_offset = get_absolute_offset_left($('annotation_category_<%=annotation_category.id%>'));
    var top_offset = get_absolute_offset_top($('annotation_category_<%=annotation_category.id%>'));
    top_offset += get_element_height($('annotation_category_<%=annotation_category.id%>'));
    
    $('annotation_label_list_<%=annotation_category.id%>').setStyle({
      left: left_offset + 'px',
      top: top_offset + 'px'
    });
    
    $('annotation_label_list_<%=annotation_category.id%>').observe('mouseout',
      function(event) {
        var target = $('annotation_label_list_<%=annotation_category.id%>');
        var mouse_over_element;
        //This fix is so that when we enter and subelements of target,
        //we don't accidentally hide the list.
        //Loosely based on this: 
        //http://images.code-head.com/code/javascript/fixOnMouseOuttest.html
        if( event.toElement ) {
          mouse_over_element = event.toElement;
        }
        else if(event.relatedTarget) {
          mouse_over_element = event.relatedTarget;
        }
        if(mouse_over_element == null) {
          return;
        }
        if(!mouse_over_element.descendantOf(target) && target != mouse_over_element) {
          target.hide();
        }
      }
    );
  <% end %>

}

function hide_annotation_label_lists() {
   $$('.annotation_label_list').each(function(element) {
     $(element).hide();
   });
}

//Get the height of this node
function get_element_height(node) {
  var node = $(node);
  return node.offsetHeight;
  
}
//Get the absolute left coordinates for this node
function get_absolute_offset_left(node) {
  return get_absolute_offset(node, 'left');
}
//Get the absolute top coordinates for this node
function get_absolute_offset_top(node) {
  return get_absolute_offset(node, 'top');
}

function get_absolute_offset(node, type) {
  //This function based on 'getposOffset' from 
  //http://www.dynamicdrive.com/dynamicindex1/chrome/index.htm

  var node = $(node);
  var total = (type == "left") ? node.offsetLeft : node.offsetTop;
  var parentElement = $(node).offsetParent;
  while (parentElement!=null){
    switch(type) {
      case 'left':
        total += parentElement.offsetLeft;
        break;
      case 'top':
        total += parentElement.offsetTop;
        break;
    }
    parentElement = parentElement.offsetParent;
  }
  return total;
}

//This function takes the ID of some annotation that already
//exists in the database, adds the new annotation link to the
//currently selected text, and then highlights the lines.
function add_existing_annotation(annotation_label_id) {
  var positions = getSelectedLines($('code'));
  if(positions.line_start == 0 && positions.line_end == 0) {
    alert('You must select some code to annotate');
    return false;
  }
  $('working').show();
  <%= remote_function (
                    :url => { :action => "add_existing_annotation" },
                    :with => "'fid='+ $('select_file_id').value +'&line_start=' + positions.line_start + '&line_end=' + positions.line_end + '&annotation_label_id='+ annotation_label_id", :after => "$('working').hide();")
                    %>

}


var click_divider = function() {
  if($$('.dp-highlighter').size() == 0) {  //If SyntaxHighlighted code DNE yet
    return false;
  }
  if(divider_expanded) {
    contract_code();
    divider_expanded = false;
  }
  else {
    expand_code();
    divider_expanded = true;
  }
}

function setup_divider(dragger, widen_target) {
    var divider = new Draggable(dragger, {scroll: window, constraint: 'horizontal',
    onDrag: function(dragged, event) {
      if(event != null) { //Sometimes, event is null.  It happens.
        var delta = event.pointerX() - init_code_pane_width;
        var pointer_x = event.pointerX();
        $('code_pane').setStyle({width: (pointer_x - $('code_pane').offsetLeft) + 'px'});
        $('content').setStyle({width: (init_content_width + delta) + 'px'});
      }
    }});
}


//After DOM is loaded, load up the first submitted file
document.observe("dom:loaded", function() {
  load_submitted_file('<%=@files[0].id%>');
  
  //TODO:  Make it so that the sidebar is never here!
  $('sidebar').hide();
  $('content').setStyle({'margin':'0 0 0 0'});
  
  //c6conley Test - want to see if I can make dropdown menus...
  setup_annotation_categories();
  
  //Make the divider work
  init_content_width = $('content').getWidth();
  init_code_pane_width = $('code_pane').getWidth();
  setup_divider($('pane_divider'), $('code_pane'));
        
  //Create the modal dialog
  modal = new Control.Modal($('create_annotation_dialog'), {fade:false});
});
</script>

<h1>Grading Assignment: <%= link_to @assignment.name, :controller => 'annotations', :action => 'students', :id => @assignment.id %> </h1>

<select id="select_file_id" name="select_file_id" onChange="load_submitted_file($(this).value)">
    <% @files.each do |file| %>
        <option value="<%= file.id %>"> 
          <%= file.filename %>
        </option>
    <% end %>
</select>
<div id="code_pane">
  <div id="annotation_menu">
    <ul id="annotation_categories">
      <li id="new_annotation_button"><button id="highlight_button" onClick="make_new_annotation(); return false;">New</button>
    <!-- First, output the list of annotation categories -->
    <% @annotation_categories.each do |annotation_category| %>
      <li class="annotation_category" id="annotation_category_<%=annotation_category.id%>" onClick="return false;" onMouseDown="return false;">
        <%=annotation_category.name %>
      </li>
    <% end %>
    </ul>    

    <!-- Next, output the invisible annotation category lists -->
    <% @annotation_categories.each do |annotation_category| %>
      <ul id="annotation_label_list_<%=annotation_category.id%>" class="annotation_label_list" style="display:none;" onClick="return false;" onMouseDown="return false;">
      <% if annotation_category.annotation_labels.size == 0: %>
        There are no annotations in this category
      <% end %>
          <% annotation_category.annotation_labels.each do |annotation_label| %>
          <li id="annotation_label_<%=annotation_label.id%>" onClick="add_existing_annotation(<%=annotation_label.id%>); hide_annotation_label_lists(); return false;" onMouseDown="return false;" title="<%=annotation_label.content%>">
            <%=truncate(annotation_label.content, 40, '...')%>
          </li>
          <% end %>
      </ul>
    <% end %>
    
  <div class="clear"></div>
  </div>
  <div class="clear"></div>
  <div id="codeviewer">
  </div>
</div>

<!-- Divider  -->
<div id="pane_divider">
</div>
<!-- End Divider -->

<div id="rubric_pane" style="float:left;">
  <ul id="rubric_tabs" class="subsection_tabs">
	<li class="tab"><a href="#rubric_viewer">Rubric</a></li>
	<li class="tab"><a href="#summary_viewer">Summary</a></li>
  </ul>

  <div id="rubric_viewer" style="float:left;">
     <div id="rubric_criteria_pane_list">
        <ul id="rubric_criteria_pane_list">
        <%# also need to render the mark per criteria (if exist) %>
        <% @rubric_criteria.each do |criterion| -%>
        <%= render :partial => "annotations/rubric_criterion", :locals => {:criterion => criterion, :result=>@result, :mark=>@marks_map[criterion.id]} %>
        <% end -%>
        </ul>

     </div>

     <div id="total_mark_div" style="float:right;"> /<%= @assignment.total_mark %>  </div>
     <div id="current_mark_div" style="float:right;"> <%= @result.calculate_total %> </div>
     <div style="float:right;">Total Mark:&nbsp;</div>
  </div>

  <div id="summary_viewer" style="float:left;">

  </div>
</div>

<div id="annotation_holder">
  <div id="dummy_annotation" style="display:none;" class="annotation">
  </div>
</div>

<div id="create_annotation_dialog" style="display:none;">
  <p>
    <h2>Create new annotation</h2>
  </p>
  <p>
    <textarea id="new_annotation_content"></textarea>
  </p>
  <p>
    <h3>Annotation Category<h3>
    <select id="new_annotation_category">
      <option value="">Uncategorized</option>
      <% @annotation_categories.each do |annotation_category| %>
      <option value="<%=annotation_category.id%>"><%=annotation_category.name%></option>
      <% end %>
    </select>
    </p>
    <p style="margin-top: 5px; border-top: 1px solid #000000; padding-top: 10px;">
      <button onClick="submit_new_annotation(escape($F('new_annotation_content')), $F('new_annotation_category'));">Create New Annotation</button>
      <button onClick="modal.close();">Cancel</button>
    </p>
</div>


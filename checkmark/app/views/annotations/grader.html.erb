<%= stylesheet_link_tag("grader") %>
<%= stylesheet_link_tag("livepipe/tabs") %>
<%= stylesheet_link_tag("SyntaxHighlighter") %>
<%= javascript_include_tag "livepipe/livepipe.js" %>
<%= javascript_include_tag "livepipe/window.js" %>
<%= javascript_include_tag "livepipe/tabs.js" %>
<%= javascript_include_tag "controls.js" %>
<%= javascript_include_tag "grader.js" %>
<%= javascript_include_tag "SourceCodeGlower/AnnotationLabel.js"%>
<%= javascript_include_tag "SourceCodeGlower/AnnotationLabelDisplayer.js"%>
<%= javascript_include_tag "SourceCodeGlower/AnnotationLabelManager.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLine.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLineAnnotations.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLineCollection.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLineArray.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLine.js"%>
<%= javascript_include_tag "SourceCodeGlower/SyntaxHighlighter1p5Line.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLineManager.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeLineFactory.js"%>
<%= javascript_include_tag "SourceCodeGlower/SourceCodeAdapter.js"%>
<%= javascript_include_tag "SourceCodeGlower/SyntaxHighlighter1p5Adapter.js"%>

<%= javascript_include_tag "syntaxhighlighter/shCore.js" %>
<%= javascript_include_tag "syntaxhighlighter/shBrushJava.js" %>
<%= javascript_include_tag "syntaxhighlighter/shBrushXml.js" %>

<%= javascript_include_tag "DropDownMenu/DropDownMenu.js"%>
<script>
var selected_criterion_id = null;
var selected_extra_mark_id = null;
var positions = null;
var modal = null;
var init_content_width = 0;
var init_code_pane_width = 0;

var line_annotations = null;
var syntax_highlighter_adapter = null;

function sourceCodeReady() {
  syntax_highlighter_adapter = new SyntaxHighlighter1p5Adapter($$('.dp-highlighter').first().getElementsBySelector('ol').first());
  
  //Apply modifications to Syntax Highlighter
  syntax_highlighter_adapter.applyMods();
  
  var collection = new SourceCodeLineArray();
  var line_factory = new SourceCodeLineFactory();
  var line_manager = new SourceCodeLineManager(syntax_highlighter_adapter, line_factory, collection);
  var annotation_label_manager = new AnnotationLabelManager();
  var annotation_label_displayer = new AnnotationLabelDisplayer($('annotation_holder'));
  
  line_annotations = new SourceCodeLineAnnotations(line_manager, annotation_label_manager, annotation_label_displayer);
}

function add_annotation_label(annotation_label_id, content) {
  var annotation_label = new AnnotationLabel(annotation_label_id, 0, content);
  line_annotations.registerAnnotationLabel(annotation_label);
}

function add_annotation(annotation_id, range, annotation_label_id) {
  line_annotations.annotateRange(annotation_id, range, annotation_label_id);
}

function remove_annotation(annotation_id, range, annotation_label_id) {
  line_annotations.removeAnnotationFromRange(annotation_id, range, annotation_label_id);
}

function update_annotation_label(annotation_label_id, new_content) {
  line_annotations.getAnnotationLabelManager().getAnnotationLabel(annotation_label_id).setContent(new_content);
}


function get_anchor() {
  //TODO:  Get this to work for IE
  return window.getSelection().anchorNode;
}

function get_focus() {
  //TODO:  Get this to work for IE
  return window.getSelection().focusNode;
}

function get_mouse_positions() {
 //Get the start (anchor) and finish (focus) text nodes for where the mouse has selected
  var mouse_anchor = get_anchor();
  var mouse_focus = get_focus();
  
  //Use the SourceCodeAdapter to get the nodes that represent source code
  //lines.  
  var anchor_node = syntax_highlighter_adapter.getRootFromSelection(mouse_anchor);
  var focus_node = syntax_highlighter_adapter.getRootFromSelection(mouse_focus);
  
  //Translate these nodes to line numbers
  var line_start = line_annotations.getLineManager().getLineNumber(anchor_node);
  var line_end = line_annotations.getLineManager().getLineNumber(focus_node);

  //If no source code lines were selected, bail out
  if(line_start == 0 && line_end == 0) {
    alert('You must select some source code text');
    return false;
  }
  //If only one valid source code line was selected, we'll only highlight 
  //that one.  This is for the case where you highlight the first line, and
  //then focus some text outside of the source code as well.
  
  if(line_start == 0 && line_end != 0) {
    line_start = line_end;
  }
  if(line_start != 0 && line_end == 0) {
    line_end = line_start;
  }

  //If line_start > line_end, swap
  if(line_start > line_end) {
    var temp = line_start;
    line_start = line_end;
    line_end = temp;
  }
  
  //Return positions as an object
  return {line_start: line_start, line_end: line_end};
}

function make_new_annotation() {
  //Set global variable 'positions' to current mouse positions
  //TODO:  Refactor?  Why the global variable?
  positions = get_mouse_positions();
  if(!positions) {
    //If no text was returned, return false;
    return false;
  }
  //Open the modal dialog to ask for new Annotation details
  modal.open();
  //Manually reset the modal dialog values
  //TODO:  Refactor?
  $('new_annotation_content').setValue('');
  $('new_annotation_category').setValue('');
  $('new_annotation_content').focus();
  
  return false;
}

//This function takes the ID of some annotation that already
//exists in the database, adds the new annotation link to the
//currently selected text, and then highlights the lines.

function add_existing_annotation(annotation_label_id) {
  positions = get_mouse_positions();
  if(!positions) {
    return false;
  }
 
  <%= remote_function (
                    :url => { :action => "add_existing_annotation" },
                    :with => "'submission_file_id='+ $('select_file_id').value +'&line_start=' + positions.line_start + '&line_end=' + positions.line_end + '&annotation_label_id='+ annotation_label_id")
                    %>

}



//Load a submitted file into the code-viewer based on file id's
function load_submitted_file(submission_file_id) {
  $('working').show();
  line_annotations = null;
<%= remote_function (:url =>{ :action => "codeviewer", :id => @assignment.id, :uid => @uid },
                   :with => "'submission_file_id='+submission_file_id", :after => "$('working').hide();")%>
}


function submit_new_annotation(content, category_id) {
  //Was any annotation label text provided?
  if (content == '') {
    alert('You must provide some annotation text');
    return false;
  }

  //Close the dialog
  modal.close();
  //Send AJAX request
  <%= remote_function (
                    :url => { :action => "create" },
                    :with => "'submission_file_id='+ $('select_file_id').value +'&line_start=' + positions.line_start + ' &line_end=' + positions.line_end + '&annotation_text='+ content + '&category_id=' + category_id")
                    %>
}

function focus_source_code_line(line_num) {
  //First, switch to the source code viewer tab
  code_tab_menu.setActiveTab('code_holder');
  //Next, grab the dom node that represents this source code line,
  //and scroll to it.
  var line = line_annotations.getLineManager().getLine(line_num);
  if(line != null) {
    $(line.getLineNode()).scrollIntoView();
  }
}

/** Begin Annotation Category dropdown code **/

var drop_down_menus = $A();
function setup_annotation_categories() {
  <% @annotation_categories.each do |annotation_category| %>
  drop_down_menus[<%=annotation_category.id%>] = new DropDownMenu($('annotation_category_<%=annotation_category.id%>'), $('annotation_label_list_<%=annotation_category.id%>'));
  <% end %>
}

var click_divider = function() {
  if($$('.dp-highlighter').size() == 0) {  //If SyntaxHighlighted code DNE yet
    return false;
  }
  if(divider_expanded) {
    contract_code();
    divider_expanded = false;
  }
  else {
    expand_code();
    divider_expanded = true;
  }
}

function setup_divider(dragger, widen_target) {
    var divider = new Draggable(dragger, {scroll: window, constraint: 'horizontal',
    onDrag: function(dragged, event) {
      if(event != null) { //Sometimes, event is null.  It happens.
        var delta = event.pointerX() - init_code_pane_width;
        var pointer_x = event.pointerX();
        $('code_pane').setStyle({width: (pointer_x - $('code_pane').offsetLeft) + 'px'});
        $('content').setStyle({width: (init_content_width + delta - 60) + 'px'});
      }
    },
    onEnd: function(dragged, event) {
      console.info('Content width: ' + $('content').getWidth());
    }
    });
}


//After DOM is loaded, load up the first submitted file
document.observe("dom:loaded", function() {
  load_submitted_file('<%=@files[0].id%>');
  
  //TODO:  Make it so that the sidebar is never here!
  $('sidebar').hide();
  $('content').setStyle({'margin':'0 0 0 0'});
  
  //c6conley Test - want to see if I can make dropdown menus...
  setup_annotation_categories();
  
  //Make the divider work
  init_content_width = $('content').getWidth();
  init_code_pane_width = $('code_pane').getWidth();
  setup_divider($('pane_divider'), $('code_pane'));
        
  //Create the modal dialog
  modal = new Control.Modal($('create_annotation_dialog'), {fade:false});
});
</script>

<div style="float:left;">
<h1>Grading Assignment: <%= link_to @assignment.name, :controller => 'annotations', :action => 'students', :id => @assignment.id %> 
</h1>
</div>
<div style="float:right;">
<span id="student_selector"><< Previous Student | <%=@user.user_name%> | Next Student >></span>
</div>
<div class="clear"></div>


<select id="select_file_id" name="select_file_id" onChange="load_submitted_file($(this).value)">
    <% @files.each do |file| %>
        <option value="<%= file.id %>"> 
          <%= file.filename %>
        </option>
    <% end %>
</select>

<div id="marking_status">
  <div style="float:left;">Marking Status: <%= @result.marking_state %>   &nbsp; &nbsp;</div>
  <div style="float:left;">Total Mark:&nbsp;</div>
  <div id="current_mark_div" style="float:left;"> <%= @result.total_mark %> </div>
  <div id="total_mark_div" style="float:left;"> /<%= @assignment.total_mark %>  </div>
</div><br/>

<div id="code_pane">

  <ul id="code_and_annotations_tabs" class="subsection_tabs">
     <li class="tab"><a href="#code_holder">Source Code</a></li>
     <li class="tab"><a href="#annotations_summary">Annot. Summary</a></li>
  </ul>
  
  <div id="code_holder">
  
    <div id="annotation_menu">
      <button id="new_annotation_button" onClick="make_new_annotation(); return false;">New Annot.</button>
      
      <%= render :partial => "annotation_categories", :locals => {:annotation_categories => @annotation_categories}%>

    
    <div class="clear"></div>
  </div> <!-- End of annotation_menu -->
  <div class="clear"></div>
  <div id="codeviewer"></div>
  </div> <!-- End of Code holder -->

  <div id="annotations_summary">
    <ul id="annotation_summary_list">
    </ul>
  
    <div>
    <% form_tag({}, {:id => "overall_comment_box"}) do %>
          <p style="padding-left:30px;">Overall Comment: </p>
          <p style="padding-left:30px;"><%= text_area_tag :overall_comment, @result.overall_comment, :rows => 10, :cols => 40 %></p>
    <% end -%>
    <%= observe_form "overall_comment_box", :url => { :action => 'update_comment', :result_id => @result.id} -%>
    </div>
  </div>
</div>


<!-- Divider  -->
<div id="pane_divider">
</div>
<!-- End Divider -->

<div id="rubric_pane" style="float:left;">
  <ul id="rubric_tabs" class="subsection_tabs">
	<li class="tab"><a href="#rubric_viewer">Rubric</a></li>
	<li class="tab"><a href="#summary_viewer">Summary</a></li>
  </ul>

  <div id="rubric_viewer" style="float:left;" class="rubric_criteria_pane">
     <div id="rubric_criteria_pane">
        <ul id="rubric_criteria_pane_list" class="rubric_criteria_pane_list">
        <%# also need to render the mark per criteria (if exist) %>
        <% @rubric_criteria.each do |criterion| -%>
        <%= render :partial => "annotations/rubric_criterion", :locals => {:criterion => criterion, :result=>@result, :mark=>@marks_map[criterion.id]} %>
        <% end -%>
        </ul>
     </div>
  </div>


  <div id="summary_viewer" class="marks_summary_pane">
    <div id="summary_criteria_pane">
        <ul id="summary_criteria_pane_list" class="marks_summary_pane_list">
          <% @rubric_criteria.each do |criterion| -%>
          <%= render :partial => "annotations/criterion_summary", :locals => {:criterion => criterion, :mark=>@marks_map[criterion.id]} %>
          <% end -%>
        </ul>
    </div>
    <div id="extra_marks_pane" class="extra_marks_pane">
      <div><b>Additions/Deductions</b></div>
      <div class="link"><%= link_to_remote 'Add Additions/Deductions', :url => { :action => 'add_extra_mark', :id => @result.id}%></div>
      <ul id="extra_marks_list" class="extra_marks_pane_list">
        <% ExtraMark.find_all_by_result_id(@result.id).each do |extra_mark| -%>
          <%= render :partial => "annotations/extra_mark", :locals => {:mark => extra_mark, :reault_id=>@result.id} %>
        <% end -%>
      </ul>
    </div>
  </div>


</div>

<div id="annotation_holder">
</div>

<div id="create_annotation_dialog" style="display:none;">
  <p>
    <h2>Create new annotation</h2>
  </p>
  <p>
    <textarea id="new_annotation_content"></textarea>
  </p>
  <p>
    <h3>Annotation Category</h3>
    <select id="new_annotation_category">
      <option value="">Uncategorized</option>
      <% @annotation_categories.each do |annotation_category| %>
      <option value="<%=annotation_category.id%>"><%=annotation_category.name%></option>
      <% end %>
    </select>
    </p>
    <p style="margin-top: 5px; border-top: 1px solid #000000; padding-top: 10px;">
      <button onClick="submit_new_annotation(escape($F('new_annotation_content')), $F('new_annotation_category'));">Create New Annotation</button>
      <button onClick="modal.close();">Cancel</button>
    </p>
</div>


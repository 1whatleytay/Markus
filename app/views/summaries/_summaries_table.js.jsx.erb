<script type='text/jsx'>
  /** @jsx React.DOM */

  var SummariesTable = React.createClass({

    getDefaultProps: function() {
      var columns = [
        {
          id: 'group_name',
          content: '<%= j raw I18n.t('summaries_index.group_name') %>',
          sortable: true,
          compare: compare_anchor_text,
          searchable: true
        },
        {
          id: 'final_grade',
          content: '<%= j raw I18n.t('summaries_index.final_grade') %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: true
        },
        <%= raw @section_column %>
      ];

      <% for criterion in @criteria %>
        columns.push({
          id: 'criterion_' + '<%= criterion.class.to_s %>' + '_' + <%= criterion.id %>,
          content: '<%= criterion.name %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: false
        });
      <% end %>

      return {columns: columns, filters: null};
    },

    getInitialState: function() {
      return {
        summaries: []
      };
    },

    componentWillMount: function() {
      this.refresh();
    },

    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      document.getElementById('working').style.display = '';

      $.ajax({
        url: 'summaries/populate',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            summaries: data
          });
        }.bind(this),
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },

    render: function() {
      <% if @current_user.admin? %>
        var tas = <%= raw @tas.to_json %>;
        if (tas.length > 0) {
          var ta_filters = tas.map(function(ta) {
            return filter = {
              name: ta,
              text: ta,
              func: function(group) {
                return group.tas.indexOf(ta) > -1;
              }
            };
          });
          var all_tas = '<%= t('tas.all') %>';
          ta_filters.unshift({name: all_tas, text: all_tas, func: null});
        }
      <% else %>
        var ta_filters = null;
      <% end %>
      var summaries_data = this.state.summaries.map(function(summary) {
        var s = {};
        s['id'] = summary.id;
        s['class_name'] = summary.class_name;
        if (summary.name_url === '') {
          s['group_name'] = <span>{summary.name}</span>;
        } else {
          s['group_name'] = <a href={summary.name_url}>{summary.name}</a>;
        };
        s['final_grade'] = summary.final_grade;
        s['section'] = summary.section;
        s['tas'] = summary.tas;
        <% for criterion in @criteria %>
          var key = 'criterion_' + '<%= criterion.class.to_s %>' + '_' + '<%= criterion.id %>';
          s[key] = summary.criteria[key] || '';
        <% end %>
        return s;
      }.bind(this));

      return (
        <Table data={summaries_data}
          columns={this.props.columns}
          filters={this.props.filters}
          secondary_filters={ta_filters}
          filter_type={true}
          search_placeholder={'<%= j raw I18n.t('summaries_index.search_summaries') %>'} />
      );
    }
  });

  React.renderComponent(<SummariesTable />, document.getElementById('summaries_table'));
</script>

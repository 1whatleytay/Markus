<script>
//<![CDATA[
  var grace_periods = null;
  var penalty_decay_periods = null;
  var penalty_periods = null;


  function create_grace_periods() {
    if(!grace_periods) {
      grace_periods = new PeriodDeltaChain({
        period_root_id: 'grace_periods',
        date_format: document.getElementById('format').value,
        due_date: jQuery('#assignment_due_date').attr('value')
      });
    }
  }

  function create_penalty_decay_periods() {
    if(!penalty_decay_periods) {
      penalty_decay_periods = new PeriodDeltaChain({
        period_root_id: 'penalty_decay_periods',
        date_format: document.getElementById('format').value,
        due_date: jQuery('#assignment_due_date').attr('value')
      });
    }
  }

  function create_penalty_periods() {
    if(!penalty_periods) {
      penalty_periods = new PeriodDeltaChain({
        period_root_id: 'penalty_periods',
        date_format: document.getElementById('format').value,
        due_date: jQuery('#assignment_due_date').attr('value')
      });
    }
  }

  function check_required_fields() {
    var empty = false;
    jQuery('input[required]').each(function() {
      if (this.value === '') {
        empty = true;
      }
    });
    jQuery('input[type="submit"]').prop('disabled', empty);
  }

  function add_assignment_file() {
    var new_id = new Date().getTime();
    var input_id = 'assignment_assignment_files_attributes_' + new_id + '_filename';
    var assignment_file = '<p id="' + input_id + '_holder">' +
      '<label for="' + input_id + '"><%= t(:filename) %></label>' +
      '<input type="text" name="assignment[assignment_files_attributes][' +
      new_id + '][filename]" id="' + input_id + '" class="assignment_file" /> ' +
      '<a onclick="remove_assignment_file(\'' + input_id + '\'); return false;">' +
      '<%= t(:remove) %></a></p>';
    jQuery('#assignment_files').append(jQuery(assignment_file));

    jQuery('#only_required_files_option').removeClass('disable');
  }

  function remove_assignment_file(input_id) {
    jQuery("#" + input_id + "_holder").remove();
    if (jQuery('.assignment_file').length === 0) {
      jQuery('#only_required_files_option').addClass('disable');
    }
  }

  function check_due_date(new_due_date) {
    if (moment(new_due_date, '<%= t('date.formats.js_old_date') %>').isBefore(
         moment())) {
      alert('<%= t(:past_due_date_edit_warning) %>');
    }
  }

  jQuery(document).ready(function() {
    // Set locale for language localisation with Moment.js
    moment.lang(document.getElementById('locale').value);

    // Handle periods and hiding/showing things
    if (jQuery('#assignment_due_date').attr('value')) {
      create_grace_periods();
      create_penalty_decay_periods();
      create_penalty_periods();

      grace_periods.refresh();
      penalty_decay_periods.refresh();
      penalty_periods.refresh();

      toggle_remark_requests(<%= @assignment.allow_remarks? %>);
    }

    // Handle required fields
    check_required_fields();
    jQuery('input[required]').change(check_required_fields)
                             .keyup(check_required_fields);

    // Handle date/time pickers
    jQuery('.section_due_date_input').each(function() {
      jQuery(this).datetimepicker({
        controlType:      'select',
        showTime:         false,
        numberOfMonths:   2,
        secondMax:        0,
        onClose:          check_due_date,
        dateFormat:       "<%= raw I18n.t('date.formats.old_date') %>",
        timeFormat:       "<%= I18n.t('time.formats.locale_time') %>",
        showTimezone:     false,
        monthNames:       <%= raw I18n.t('date.months') %>,
        dayNames:         <%= raw I18n.t('date.weekdays') %>,
        dayNamesMin:      <%= raw I18n.t('date.weekdays_min') %>,
        hourText:         "<%= I18n.t('time.hour') %>",
        minuteText:       "<%= I18n.t('time.minute') %>",
        timeText:         "<%= I18n.t('time.time') %>",
        prevText:         "<%= I18n.t('time.prev') %>",
        nextText:         "<%= I18n.t('time.next') %>",
        closeText:        "<%= I18n.t('time.close') %>",
      });
    });

    jQuery('#assignment_due_date').datetimepicker({
      controlType:      'select',
      showTime:         false,
      numberOfMonths:   2,
      secondMax:        0,
      onClose:          check_due_date,
      dateFormat:       "<%= raw I18n.t('date.formats.old_date') %>",
      timeFormat:       "<%= I18n.t('time.formats.locale_time') %>",
      showTimezone:     false,
      monthNames:       <%= raw I18n.t('date.months') %>,
      dayNames:         <%= raw I18n.t('date.weekdays') %>,
      dayNamesMin:      <%= raw I18n.t('date.weekdays_min') %>,
      hourText:         "<%= I18n.t('time.hour') %>",
      minuteText:       "<%= I18n.t('time.minute') %>",
      timeText:         "<%= I18n.t('time.time') %>",
      prevText:         "<%= I18n.t('time.prev') %>",
      nextText:         "<%= I18n.t('time.next') %>",
      closeText:        "<%= I18n.t('time.close') %>",
    });

    jQuery('#assignment_remark_due_date').datetimepicker({
      controlType:      'select',
      showTime:         false,
      numberOfMonths:   2,
      secondMax:        0,
      onClose:          check_due_date,
      dateFormat:       "<%= raw I18n.t('date.formats.old_date') %>",
      timeFormat:       "<%= I18n.t('time.formats.locale_time') %>",
      showTimezone:     false,
      monthNames:       <%= raw I18n.t('date.months') %>,
      dayNames:         <%= raw I18n.t('date.weekdays') %>,
      dayNamesMin:      <%= raw I18n.t('date.weekdays_min') %>,
      hourText:         "<%= I18n.t('time.hour') %>",
      minuteText:       "<%= I18n.t('time.minute') %>",
      timeText:         "<%= I18n.t('time.time') %>",
      prevText:         "<%= I18n.t('time.prev') %>",
      nextText:         "<%= I18n.t('time.next') %>",
      closeText:        "<%= I18n.t('time.close') %>",
    });
  });
//]]>
</script>

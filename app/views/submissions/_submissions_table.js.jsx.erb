<script type='text/jsx'>
  /** @jsx React.DOM */

  SubmissionsTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      var columns = [
        {
          id: 'group_name',
          content: 'Group Name',
          sortable: true,
          searchable: true
        },
        {
          id: 'repository',
          content: 'Repository',
          sortable: true,
          searchable: true
        },
        {
          id: 'commit_date',
          content: 'Commit Date',
          sortable: true,
          searchable: false
        },
        {
          id: 'marking_state',
          content: 'Marking state',
          sortable: true,
          searchable: false
        },
        {
          id: 'grace_credits_used',
          content: 'Grace Credits Used',
          sortable: true
        },
        {
          id: 'final_grade',
          content: 'Final Grades',
          sortable: false
        },
        {
          id: 'can_begin_grading',
          content: 'Can Begin Grading',
          sortable: true
        }
      ];

      var filters = [
        {
          name: 'all',
          text: 'All',
          func: function(submission) {
            return true;
          }
        },
        {
          name: 'unmarked',
          text: 'Unmarked',
          func: function(submission) {
            return submission.state == 'unmarked';
          }
        },
        {
          name: 'partial',
          text: 'Partial',
          func: function(submission) {
            return submission.state == 'partial';
          }
        },
        {
          name: 'complete',
          text: 'Complete',
          func: function(submission) {
            return submission.state == 'complete';
          }
        },
        {
          name: 'released',
          text: 'Released',
          func: function(submission) {
            if (submission.id == 5) {
              console.log(submission);
              console.log(submission.state);
            }
            return submission.state == 'released';
          }
        }
        /*
        {
          name: 'assigned_to_me',
          text: 'Assigned to me',
          func: function(submission) {
            return true;
          }
        },
        */
      ];
      return {
        columns: columns,
        filters: filters
      };
    },
    getInitialState: function() {
      return {
        loading: true,
        error: null,
        submissions: [],
        selected_submissions: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    updateSelectedSubmissions: function(submissions) {
      this.setState({selected_submissions: submissions});
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      jQuery.ajax({
        method: 'GET',
        url: 'populate',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          this.setState({
            submissions: data,
            loading: false,
            error: null
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this)
      });
    },
    onError: function(error) {
      this.setState({error: error});
    },
    render: function() {
      // Do student-specific table stuff here.
      // possibly move this to getdefaultprops.
      var submissions_data = this.state.submissions.map(function(submission) {
        var s = {};
        s['class_name'] = submission.class_name;
        s['id'] = submission.id;
        s['group_name'] = <span dangerouslySetInnerHTML={{__html: submission.group_name}} />;
        s['repository'] = <span dangerouslySetInnerHTML={{__html: submission.repository}} />;
        s['commit_date'] = <span dangerouslySetInnerHTML={{__html: submission.commit_date}} />;
        s['marking_state'] = <span dangerouslySetInnerHTML={{__html: submission.marking_state}} />;
        s['grace_credits_used'] = submission.grace_credits_used;
        s['final_grade'] = submission.final_grade;
        s['state'] = submission.state;
        s['can_begin_grading'] = <span dangerouslySetInnerHTML={{__html: submission.can_begin_grading}} />;
        return s;
      }.bind(this));
      
      if (this.state.loading) {
        return (
          <div><%= j raw I18n.t(:'working') %></div>
        );
      } else {
        return (
          <div>
            <ErrorDiv error={this.state.error} />
            <SubmissionsActionBox
              selected_submissions={this.state.selected_submissions}
              onError={this.onError}
              refresh={this.refresh}
            />
            <Table data={submissions_data}
              columns={this.props.columns}
              selectable={true}
              filters={this.props.filters}
              filter_type={true}
              onSelectedRowsChange={this.updateSelectedSubmissions}
            />
          </div>
        );
      }
    }
  });

  SubmissionsActionBox = React.createClass({
    propTypes: {
      selected_submissions: React.PropTypes.array
    },
    releaseMarks: function() {
      var dataLoad = {
        release_results: true,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.props.onError(error);
        }.bind(this)
      });
    },
    unreleaseMarks: function() {
      var dataLoad = {
        unrelease_results: false,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.props.onError(error);
        }.bind(this)
      });
    },
    render: function() {
      return (
        <div>
          <button onClick={this.releaseMarks}>Release Marks</button>
          <button onClick={this.unreleaseMarks}>Unrelease Marks</button>
        </div>
      );
    }
  });

  React.renderComponent(<SubmissionsTable />, document.getElementById('submissions_table'));
</script>

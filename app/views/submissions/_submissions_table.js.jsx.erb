<script type='text/jsx'>
  /** @jsx React.DOM */

  SubmissionsTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      var columns = [
        {
          id: 'checkbox',
          content: <div>
            <input type='checkbox' 
              onChange={this.checkboxAllClicked.bind(this)} />
            </div>,
          sortable: false,
          searchable: false
        },
        {
          id: 'group_name',
          content: 'Group Name',
          sortable: true,
          searchable: true
        },
        {
          id: 'repository',
          content: 'Repository',
          sortable: true,
          searchable: true
        },
        {
          id: 'commit_date',
          content: 'Commit Date',
          sortable: true,
          searchable: false
        },
        {
          id: 'marking_state',
          content: 'Marking state',
          sortable: true,
          searchable: false
        },
        {
          id: 'grace_credits_used',
          content: 'Grace Credits Used',
          sortable: true
        },
        {
          id: 'final_grade',
          content: 'Final Grades',
          sortable: false
        },
        {
          id: 'can_begin_grading',
          content: 'Can Begin Grading',
          sortable: true
        }
      ];
      return {
        columns: columns,
      };
    },
    getInitialState: function() {
      return {
        loading: true,
        error: null,
        submissions: [],
        selected_submissions: []
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      jQuery.ajax({
        method: 'GET',
        url: 'populate',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          this.setState({
            submissions: data,
            loading: false,
            error: null
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this)
      });
    },
    // Checkbox clicked (this must be in the parent since we're passing the box down from here)
    checkboxAllClicked: function(event) {
      var value = event.currentTarget.checked;
      if (value) {
        var new_selected_submissions = this.state.submissions.map(function(x) { return x.id; }).slice();
        this.setState({
          selected_submissions: new_selected_submissions
        });
      } else {
        this.setState({
          selected_submissions: []
        });
      }
    },
    // The checkbox on one of the table rows was clicked.
    checkboxChanged: function(event) {
      var value = event.currentTarget.checked;
      var submission_id = parseInt(event.currentTarget.parentNode.parentNode.getAttribute('id'));

      // Figure out new selected_submissions state...
      var new_selected_submissions = this.state.selected_submissions.slice();
      if (value == true) {
        new_selected_submissions.push(submission_id);
      } else {
        new_selected_submissions.splice(new_selected_submissions.indexOf(submission_id), 1);
      }
      this.setState({
        selected_submissions: new_selected_submissions
      });
    },
    onError: function(error) {
      this.setState({
        error: error
      });
    },
    render: function() {
      // Do student-specific table stuff here.
      // possibly move this to getdefaultprops.
      var submissions_data = this.state.submissions.map(function(submission) {
        var s = {};
        s['id'] = submission.id;
        s['checkbox'] = <input type='checkbox'
          onChange={this.checkboxChanged}
          checked={this.state.selected_submissions.indexOf(submission.id) !== -1 ? true : false} />;
        s['group_name'] = <span dangerouslySetInnerHTML={{__html: submission.group_name}} />;
        s['repository'] = <span dangerouslySetInnerHTML={{__html: submission.repository}} />;
        s['commit_date'] = <span dangerouslySetInnerHTML={{__html: submission.commit_date}} />;
        s['marking_state'] = <span dangerouslySetInnerHTML={{__html: submission.marking_state}} />;
        s['grace_credits_used'] = submission.grace_credits_used;
        s['final_grade'] = submission.final_grade;
        s['can_begin_grading'] = <span dangerouslySetInnerHTML={{__html: submission.can_begin_grading}} />;
        return s;
      }.bind(this));
      
      if (this.state.loading) {
        return (
          <div><%= j raw I18n.t(:'working') %></div>
        );
      } else {
        return (
          <div>
            <Table data={submissions_data}
              columns={this.props.columns} />
          </div>
        );
      }
    }
  });

  React.renderComponent(<SubmissionsTable />, document.getElementById('submissions_table'));
</script>

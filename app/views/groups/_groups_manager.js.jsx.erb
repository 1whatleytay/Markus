<script type='text/jsx'>
  /** @jsx React.DOM */

  // The master component that manages both tables and
  // the add/remove actions
  GroupsManager = React.createClass({
    getInitialState: function() {
      return {
        students: [],
        selected_students: [],
        groups: [],
        selected_groups: [],
        selected_students_in_groups: [],
        error: null
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    updateSelectedStudents: function(students) {
      this.setState({
        selected_students: students
      });
    },
    updateSelectedGroups: function(groups) {
      this.setState({
        selected_groups: groups
      });
    },
    updateSelectedStudentsInGroups: function(students) {
      this.setState({
        selected_students_in_groups: students
      });
    },
    // Sends a request to the server to perform some action
    // such as assigning or removing a member to/from a group
    performAction: function(action) {
      var dataLoad = {
        submit_type: 'global_action',
        global_actions: action,
        students: this.state.selected_students,
        students_to_remove: this.state.selected_students_in_groups,
        groupings: this.state.selected_groups
      };
      
      jQuery.ajax({
        method: 'POST',
        url: 'groups/global_actions',
        data: dataLoad,
        success: function(data) {
          this.refresh();
          this.setState({
            selected_students: [],
            selected_groups: [],
            selected_students_in_groups: [],
            error: null
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this)
      });
    },
    // Asks for new info from backend and sets state accordingly.
    refresh: function() {
      jQuery.ajax({
        method: 'GET',
        url: 'groups',
        dataType: 'json',
        success: function(data) {
          this.setState({
            students: data[0],
            groups: data[1]
          });
        }.bind(this)
      });
    },
    render: function() {
      return (
        <div>
          <Error error={this.state.error} />
          <GroupsStudentsTable students={this.state.students}
            selected_students={this.state.selected_students}
            onSelectedStudentsChange={this.updateSelectedStudents}/>
          <ActionsColumn refresh={this.refresh} performAction={this.performAction} />
          <GroupsTable groups={this.state.groups} 
            selected_groups={this.state.selected_groups}
            onSelectedGroupsChange={this.updateSelectedGroups}
            selected_students_in_groups={this.state.selected_students_in_groups}
            onSelectedStudentsInGroupsChange={this.updateSelectedStudentsInGroups}
            refresh={this.refresh} />
        </div>
      );
    }
  });

  // Table of students, on the left.
  GroupsStudentsTable = React.createClass({
    checkboxClicked: function(event) {
      var value = event.currentTarget.checked;
      var student_id = parseInt(event.currentTarget.getAttribute('id'));
      var new_selected_students = this.props.selected_students.slice();
      if (value == true) {
        new_selected_students.push(student_id);
      } else {
        new_selected_students.splice(new_selected_students.indexOf(student_id), 1);
      }
      this.props.onSelectedStudentsChange(new_selected_students);
    },
    render: function() {
      var columns = [
      {
        id: 'checkbox',
        content: <div></div>,
        sortable: false,
        searchable: false
      },
      {
        id: 'user_name',
        content: '<%= j raw I18n.t('user.user_name') %>',
        sortable: true,
        searchable: true
      },
      {
        id: 'last_name',
        content: '<%= j raw I18n.t('user.last_name') %>',
        sortable: true,
        searchable: true,
      },
      {
        id: 'first_name',
        content: '<%= j raw I18n.t('user.first_name') %>',
        sortable: true,
        searchable: true
      }
      ];

      var filters = [
        {
          name: 'all',
          text: '<%= j raw I18n.t('groups.all_students') %>',
          func: function(student) {
            return student;
          }
        },
        {
          name: 'unassigned',
          text: '<%= j raw I18n.t('groups.unassigned_students') %>',
          func: function(student) {
            return !student.assigned;
          }
        },
        {
          name: 'assigned',
          text: '<%= j raw I18n.t('groups.assigned_students') %>',
          func: function(student) {
            return student.assigned;
          }
        },
        {
          name: 'inactive',
          text: '<%= j raw I18n.t('groups.inactive_students') %>',
          func: function(student) {
            return student.hidden;
          }
        }
      ];

      var students_data = this.props.students.map(function(student) {
        var s = {};
        s['id'] = student.id;
        s['checkbox'] = <input id={student.id} type='checkbox'
          checked={this.props.selected_students.indexOf(student.id) !== -1 ? true : false}
         onChange={this.checkboxClicked} />
        s['user_name'] = student.user_name;
        s['last_name'] = student.last_name;
        s['first_name'] = student.first_name;
        s['hidden'] = student.hidden;
        s['assigned'] = student.assigned;
        return s;
      }.bind(this));

      return (
        <div className={'colLeftGroups'} >
          <div className={'wrapLeftGroups'}>
            <Table data={students_data}
            columns={columns}
            filters={filters}
            search_placeholder={'<%= j raw I18n.t('students.search_students') %>'} />
          </div>
        </div>
      );
    }
  });

  // The table of groups on the right.
  GroupsTable = React.createClass({
    groupCheckboxClicked: function(event) {
      var value = event.currentTarget.checked;
      var group_id = parseInt(event.currentTarget.getAttribute('id'));
      var new_selected_groups = this.props.selected_groups.slice();
      if (value == true) {
        new_selected_groups.push(group_id);
      } else {
        new_selected_groups.splice(new_selected_groups.indexOf(group_id), 1);
      }
      this.props.onSelectedGroupsChange(new_selected_groups);
    },
    studentCheckboxClicked: function(event) {
      var value = event.currentTarget.checked;
      var group_student_id = parseInt(event.currentTarget.getAttribute('id'));
      var new_selected_students_in_groups = this.props.selected_students_in_groups.slice();
      if (value == true) {
        new_selected_students_in_groups.push(group_student_id);
      } else {
        new_selected_students_in_groups.splice(new_selected_students_in_groups.indexOf(group_student_id), 1);
      }
      this.props.onSelectedStudentsInGroupsChange(new_selected_students_in_groups);
    },
    refresh: function() {
      this.props.refresh();
    },
    render: function() {
      var columns = [
      {
        id: 'checkbox',
        content: <div></div>,
        sortable: false,
        searchable: false
      },
      {
        id: 'name',
        content: '<%= j raw I18n.t('groups.groupe_name') %>',
        sortable: true,
        searchable: true
      },
      {
        id: 'links',
        content: <div></div>,
        sortable: false,
        searchable: false
      },

      {
        id: 'members',
        content: '<%= j raw I18n.t('members') %>',
        sortable: true,
        searchable: true
      },
      ];

      var filters = [
      {
        name: 'all',
        text: '<%= j raw I18n.t('groups.all_grouping_counts') %>',
        func: function(group) {
          return true;
        }
      },
      {
        name: 'valid',
        text: '<%= j raw I18n.t('groups.valid_grouping_counts') %>',
        func: function(group) {
          return group.valid;
        }
      },
      {
        name: 'not_valid',
        text: '<%= j raw I18n.t('groups.not_valid_grouping_counts') %>',
        func: function(group) {
        return !group.valid;
        }
      },
      ];

      // Massage the data so it will fit into the table.
      var groups_data = this.props.groups.map(function(group) {
        var g = {};
        g['id'] = group.id;
        g['checkbox'] = <input id={group.id} type='checkbox'
          checked={this.props.selected_groups.indexOf(group.id) !== -1 ? true : false}
          onChange={this.groupCheckboxClicked} />
        g['name'] = group.name;
        var links = [];
        if (group.valid) {
          links.push(group.invalidate_link);
        } else {
          links.push(group.validate_link);
        }
        links.push(group.rename_link);
        links.push(group.note_link);
        links.push(group.delete_link);
        g['links'] = <span onClick={this.refresh} dangerouslySetInnerHTML={{__html: links.join(' ')}} ></span>

        var members = [];
        for (var i = 0; i < group.members.length; i++) {
          members.push(<div key={group.members[i].id}>
            <input id={group.members[i].id}
              type='checkbox'
              checked={this.props.selected_students_in_groups.indexOf(group.members[i].id) !== -1 ? true : false}
              onChange={this.studentCheckboxClicked} />{group.members[i].user_name}</div>);
        }
        g['members'] = members;
        g['valid'] = group.valid;

        return g;
      }.bind(this));

      return (
        <div className={'colRightGroups'}>
          <div className={'wrapRightGroups'}>
            <Table data={groups_data} columns={columns} filters={filters} 
              search_placeholder={'<%= j raw I18n.t('groups.search_groups') %>'} />
          </div>
        </div>
      );
    }
  });

  ActionsColumn = React.createClass({
    performAction: function(event) {
      var action = event.currentTarget.getAttribute('id');
      this.props.performAction(action);
    },
    render: function() {
      return (
        <div className={'centreColumn'}>
          <div id='icons'>
            <img id='assign'
              src='/assets/add_arrow.png'
              alt='<%= j raw I18n.t('add_members') %>'
              onClick={this.performAction}
            />
            <br/>
            <img id='unassign'
              src='/assets/remove_arrow.png'
              alt='<%= j raw I18n.t('remove_members') %>'
              onClick={this.performAction}
            />
          </div>
        </div>
      );
    }
  });
  React.renderComponent(<GroupsManager />, document.getElementById('groupsManager'));
</script>

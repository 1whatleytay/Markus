<script type='text/jsx'>
  /** @jsx React.DOM */

  // The main manager that controls all the components.
  var PeerReviewsManager = React.createClass({
    getInitialState: function() {
      return {
        reviewer_groups: [],
        reviewee_groups: [],
        selected_reviewer_groups: [],
        selected_reviewee_groups: [],
        reviewee_to_reviewers: {},
        id_to_group_name: {},
        error: null,

        // Ones to be removed below:
        students: [],
        selected_students: [],
        groups: [],
        selected_groups: [],
        selected_students_in_groups: []
      };
    },

    componentWillMount: function() {
      this.refresh();
    },

    updateSelectedReviewerGroups: function(reviewerGroups) {
      this.setState({selected_reviewer_groups: reviewerGroups});
    },

    updateSelectedRevieweeGroups: function(revieweeGroups) {
      this.setState({selected_reviewee_groups: revieweeGroups});
    },

    // TODO - FUNCTIONS TO REMOVE AT SOME POINT
    // =================================
    // =================================
    // =================================
    updateSelectedStudents: function(students) {
      //this.setState({selected_students: students});
    },

    updateSelectedGroups: function(groups) {
      //this.setState({selected_groups: groups});
    },

    updateSelectedStudentsInGroups: function(students) {
      //this.setState({selected_students_in_groups: students});
    },
    // =================================
    // =================================
    // =================================

    componentDidMount: function () {
      var me = this;
      jQuery(document).ready(function () {
        jQuery('#create_group_dialog form').on('ajax:success', function() {
          modalCreate.close();
          me.refresh();
        });
      });
    },

    // Asks for new info from backend and sets state accordingly.
    refresh: function() {
      // Since these will not be present at the beginning, we only want to
      // invoke them when React populates the refs with the values.
      // Also, hasOwnProperty() works in all browsers the best out of all the
      // property checking options, and thus was chosen.
      if (this.refs.hasOwnProperty('reviewerTable'))
        this.refs.reviewerTable.clearCheckboxes();
      if (this.refs.hasOwnProperty('revieweeTable'))
        this.refs.revieweeTable.clearCheckboxes();

      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: 'peer_reviews/populate',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          document.getElementById('working').style.display = 'none';
          this.setState({
            reviewer_groups: data[0],
            reviewee_groups: data[1],
            reviewee_to_reviewers: data[2],
            id_to_group_name: data[3]
          });
        }.bind(this)
      });
    },

    render: function() {
      var skip_empty_submissions = [];
      skip_empty_submissions.push(<input type='checkbox'
          checked={this.state.skip_empty_submissions}
          onChange={this.skipEmptySubmissionsClicked}> <%= j raw t('graders.skip_empty_submissions') %>
        </input>);

      // TODO - remove pointless methods/props we don't use anymore.
      return (
        <div>
          <ErrorDiv error={this.state.error} />
          <div className='skip-empty-submissions'>{skip_empty_submissions}</div>
          <div className='columns'>
            <ReviewerTable ref="reviewerTable"
              groups={this.state.reviewer_groups}
              selected_groups={this.state.selected_groups}
              onSelectedGroupsChange={this.updateSelectedReviewerGroups}
              selected_students_in_groups={this.state.selected_students_in_groups}
              onSelectedStudentsInGroupsChange={this.updateSelectedStudentsInGroups}
              refresh={this.refresh} />
            <ActionsColumn refresh={this.refresh}
              selectedReviewerGroups={this.state.selected_reviewer_groups}
              selectedRevieweeGroups={this.state.selected_reviewee_groups} />
            <RevieweeTable ref="revieweeTable"
              groups={this.state.reviewee_groups}
              selected_groups={this.state.selected_groups}
              onSelectedGroupsChange={this.updateSelectedRevieweeGroups}
              selected_students_in_groups={this.state.selected_students_in_groups}
              onSelectedStudentsInGroupsChange={this.updateSelectedStudentsInGroups}
              revieweeToReviewersMap={this.state.reviewee_to_reviewers}
              idToGroupName={this.state.id_to_group_name}
              refresh={this.refresh} />
          </div>
        </div>
      );
    }
  });
  
  // The table of groups to be graders on the left.
  var ReviewerTable = React.createClass({
    getDefaultProps: function() {
      return {
        columns: [
          {
            id: 'name',
            content: '<%= j raw t('groups.group_name') %>',
            sortable: true,
            searchable: true
          },
          {
            id: 'groups',
            content: '<%= j raw t('assignment.peer_review.number_of_reviews_header') %>',
            sortable: false,
            searchable: false
          },
        ],
      };
    },

    clearCheckboxes: function() {
      this.refs.table.clearCheckboxes();
    },

    render: function() {
      var filters = [
        {
          name: 'all',
          text: '<%= j raw t('groups.all_grouping_counts') %>',
          func: function(group) {
            return true;
          }
        },
      ];

      // Massage the data so it will fit into the table.
      var groups_data = this.props.groups.map(function(group) {
        var g = {};
        var members = [];
        for (var i = 0; i < group.members.length; i++) {
          members.push(<div key={group.members[i].id}>{group.members[i].user_name}</div>);
        }
        g['id'] = group.id;
        g['name'] = group.name;
        g['members'] = members;
        g['valid'] = group.valid;
        g['links'] = group.id;
        g['groups'] = <b>0</b>;
        return g;
      }.bind(this));

      return (
        <div className={'col-left'}>
          <div className={'tab-pane ui-tabs ui-widget ui-widget-content ui-corner-all'} id='groups-tabs'>
            <Table ref="table"
              data={groups_data}
              columns={this.props.columns}
              filters={this.props.filters} 
              selectable={true}
              onSelectedRowsChange={this.props.onSelectedGroupsChange}
              search_placeholder={'<%= j raw t('groups.search_groups') %>'} />
          </div>
        </div>
      );
    }
  });

  // The table of groups on the right.
  var RevieweeTable = React.createClass({
    getDefaultProps: function() {
      return {
        columns: [
          {
            id: 'name',
            content: '<%= j raw t('groups.group_name') %>',
            sortable: true,
            searchable: true
          },
          {
             id: 'members',
             content: '<%= j raw t('assignment.peer_review.assigned_reviewers_header') %>',
             sortable: false,
             searchable: false
          },
        ],
      };
    },

    clearCheckboxes: function() {
      this.refs.table.clearCheckboxes();
    },

    render: function() {
      var filters = [
        {
          name: 'all',
          text: '<%= j raw t('groups.all_grouping_counts') %>',
          func: function(group) {
            return true;
          }
        },
      ];

      // Massage the data so it will fit into the table.
      var groups_data = this.props.groups.map(function(group) {
        var reviewerGroups = [];
        var reviewee_group_id = group.group_id;
        var reviewer_ids = this.props.revieweeToReviewersMap[reviewee_group_id];
        for (var j = 0; j < reviewer_ids.length; j++) {
          var reviewer_group_id = reviewer_ids[j];
          var reviewer_group_name = this.props.idToGroupName[reviewer_group_id];
          // TODO - Need to maintain a list of checked people and updated checked="..."
          reviewerGroups.push(<div key={reviewer_group_id}>
            <input id={reviewer_group_id} type='checkbox' checked={false}/> {reviewer_group_name}</div>);
        }

        var g = {};
        g['id'] = group.id;
        g['name'] = group.name;
        g['members'] = reviewerGroups;
        return g;
      }.bind(this));

      return (
        <div className={'col-right'}>
          <div className={'tab-pane ui-tabs ui-widget ui-widget-content ui-corner-all'} id='groups-tabs'>
            <Table ref="table"
              data={groups_data}
              columns={this.props.columns}
              filters={this.props.filters}
              selectable={true}
              onSelectedRowsChange={this.props.onSelectedGroupsChange}
              search_placeholder={'<%= j raw t('groups.search_groups') %>'} />
          </div>
        </div>
      );
    }
  });

  var ActionsColumn = React.createClass({
    performButtonAction: function(event) {
      var dataToSend = {
        actionString: event.currentTarget.getAttribute('id'),
        selectedReviewerGroupIds: this.props.selectedReviewerGroups,
        selectedRevieweeGroupIds: this.props.selectedRevieweeGroups
      };

      jQuery.ajax({
        method: 'POST',
        url: 'peer_reviews/assign_groups',
        data: dataToSend,

        success: function(data) {
          this.props.refresh();
          this.setState({ error: null });
        }.bind(this),

        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({ error: error });
        }.bind(this)
      });
    },

    render: function() {
      return (
        <div className={'col-center'}>
          <div id='icons'>
            <input id='random_assign'
              className='image_input'
              src='<%= image_path 'random_arrow.png' %>'
              alt='<%= j raw t('groups.randomly_assign_graders') %>'
              onClick={this.performButtonAction}
              type='image'
            />
            <input id='assign'
              className='image_input'
              src='<%= image_path('add_arrow.png') %>'
              alt='<%= j raw t('add_members') %>'
              onClick={this.performButtonAction}
              type='image'
            />
            <input id='unassign'
              className='image_input'
              src='<%= image_path('remove_arrow.png') %>'
              alt='<%= j raw t('remove_members') %>'
              onClick={this.performButtonAction}
              type='image'
            />
          </div>
        </div>
      );
    }
  });

  React.renderComponent(<PeerReviewsManager/>, document.getElementById('peer_reviews_manager'));
</script>

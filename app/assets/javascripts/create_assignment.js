jQuery(document).ready(function() {
  // Change repo folder to be same as short identifier
  jQuery('#assignment_short_identifier').keyup(function() {
    jQuery('#assignment_repository_folder').val(jQuery(this).val());
  });

  jQuery('#assignment_due_date').change(function() {
    update_due_date(jQuery('#actual_assignment_due_date').val());
  });

  jQuery('#assignment_section_due_dates_type').change(function() {
    toggle_sections_due_date(jQuery(this).is(':checked'));
  });

  toggle_sections_due_date(jQuery('#assignment_section_due_dates_type').is(':checked'));

  /* Update the global due date with the first section due date added, if the global due date
     has not been set yet. */
  var first = true;
  jQuery('.section_due_date').change(function() {
    if (first && (jQuery('#actual_assignment_due_date').val() == '')) {
      jQuery('#actual_assignment_due_date').val(jQuery(this).siblings('.actual_section_due_date').val());
      jQuery('#assignment_due_date').val(jQuery(this).val());
      first = false;
    }
  });

  jQuery('#persist_groups').change(function() {
    toggle_persist_groups(jQuery(this).is(':checked'));
  });

  jQuery('#persist_groups_assignment').change(function() {
    jQuery.ajax({
      url:  this.getAttribute('data-path'),
      type: 'POST',
      data: 'assignment_id=' + this.value +
            '&authenticity_token=' + AUTH_TOKEN
    });
  });

  jQuery('#is_group_assignment').change(function() {
    toggle_group_assignment(jQuery(this).is(':checked'));
  });

  toggle_group_assignment(jQuery('#is_group_assignment').is(':checked'));

  jQuery('#assignment_student_form_groups').change(function() {
    toggle_student_form_groups(jQuery(this).is(':checked'));
  });

  jQuery('#allow_remarks').change(function() {
    toggle_remark_requests(jQuery(this).is(':checked'));
  });

  change_submission_rule();  // Opens the correct rule

  // Min group size must be <= max group size
  // If the min value is larger than the max, make the max this new value
  jQuery('#assignment_group_min').change(function() {
    if (!check_group_size()) {
      document.getElementById('assignment_group_max').value = this.value;
    }
  });

  // If the max value is smaller than the min, make the min this new value
  jQuery('#assignment_group_max').change(function() {
    if (!check_group_size()) {
      document.getElementById('assignment_group_min').value = this.value;
    }
  });
});


function check_group_size() {
  var min = document.getElementById('assignment_group_min').value;
  var max = document.getElementById('assignment_group_max').value;

  return min <= max;
}

function toggle_persist_groups(persist_groups) {
  jQuery('#persist_groups_assignment').prop('disabled', !persist_groups);
  jQuery('#is_group_assignment').prop('disabled', persist_groups);
  jQuery('#is_group_assignment_style').toggleClass('disable', persist_groups);
}

function toggle_group_assignment(is_group_assignment) {
  jQuery('.group_properties').toggle(is_group_assignment);

  // Toggle the min/max fields depending on if students form their own groups
  var student_groups = document.getElementById('assignment_student_form_groups')
                               .checked;
  toggle_student_form_groups(student_groups);

  jQuery('#persist_groups').prop('disabled', is_group_assignment);
  jQuery('#persist_groups_assignment_style').toggleClass('disable', is_group_assignment);
}

function toggle_student_form_groups(student_form_groups) {
  jQuery('#assignment_group_min').prop('disabled', !student_form_groups);
  jQuery('#assignment_group_max').prop('disabled', !student_form_groups);
  jQuery('#group_limit_style').toggleClass('disable', !student_form_groups);
  jQuery('#group_name_autogenerated_style').toggleClass('disable', student_form_groups);
  jQuery('#assignment_group_name_autogenerated').prop('disabled', student_form_groups);

  if (student_form_groups) {
    jQuery('#assignment_group_name_autogenerated').prop('checked', true);
  }
}

function toggle_remark_requests(bool) {
  jQuery('#remark_properties').toggle(bool);
}

function update_group_properties(is_group_assignment, student_form_groups, group_min, group_max, group_name_autogenerated) {
  jQuery('#is_group_assignment').val(is_group_assignment);
  jQuery('#assignment_student_form_groups').val(student_form_groups);
  jQuery('#assignment_group_min').val(group_min)
                                 .prop('disabled', true);
  jQuery('#assignment_group_max').val(group_max)
                                 .prop('disabled', true);
  jQuery('#assignment_group_name_autogenerated').val(group_name_autogenerated);

  jQuery('#is_group_assignment').prop('disabled', true)
                                .addClass('disable');
  jQuery('#sasignment_student_form_groups').prop('disabled', true);
  jQuery('#student_form_groups_style').addClass('disable');
  jQuery('#group_limit_style').addClass('disable');
  jQuery('#assignment_group_name_autogenerated').prop('disabled', true);
  jQuery('#group_name_autogenerated_style').addClass('disable');
}

function update_due_date(new_due_date) {
  // Does nothing if {grace, penalty_decay, penalty}_periods already created
  create_grace_periods();
  create_penalty_decay_periods();
  create_penalty_periods();

  grace_periods.set_due_date(new_due_date);
  penalty_decay_periods.set_due_date(new_due_date);
  penalty_periods.set_due_date(new_due_date);

  grace_periods.refresh();
  penalty_decay_periods.refresh();
  penalty_periods.refresh();
}

function toggle_sections_due_date(section_due_dates_type) {
  jQuery('#section_due_dates_information').toggle(section_due_dates_type);
}

function change_submission_rule() {
  jQuery('.period').hide();
  jQuery('.sub_rule_link a').hide();
  jQuery('.period input').prop('disabled', true);

  if (jQuery('#grace_period_submission_rule').is(':checked')) {
    jQuery('#grace_periods .period').show();
    jQuery('#grace_period_link').show();
    if (jQuery('#grace_periods .period').length === 0) {
      jQuery('#grace_period_link').click();
    }
    jQuery('#grace_periods .period input').prop('disabled', false);
  }

  if (jQuery('#penalty_decay_period_submission_rule').is(':checked')) {
    jQuery('#penalty_decay_periods .period').show();
    jQuery('#penalty_decay_period_link').show();
    if (jQuery('#penalty_decay_periods .period').length === 0) {
      jQuery('#penalty_decay_period_link').click();
    }
    jQuery('#penalty_decay_periods .period input').prop('disabled', false);
  }

  if (jQuery('#penalty_period_submission_rule').is(':checked')) {
    jQuery('#penalty_periods .period').show();
    jQuery('#penalty_period_link').show();
    if (jQuery('#penalty_periods .period').length === 0) {
      jQuery('#penalty_period_link').click();
    }
    jQuery('#penalty_periods .period input').prop('disabled', false);
  }
}

function check_due_date(new_due_date) {
  if (new Date(new_due_date) < new Date()) {
    alert(past_due_date);
  }
}
